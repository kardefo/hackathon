<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tic Tac Toe</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            margin: 0;
            background-color: #f0f0f0;
        }
        
        .game-container {
            text-align: center;
            background: white;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        
        h1 {
            color: #333;
            margin-bottom: 20px;
        }
        
        .board {
            display: grid;
            grid-template-columns: repeat(3, 100px);
            grid-template-rows: repeat(3, 100px);
            gap: 5px;
            margin: 20px auto;
            background-color: #333;
            padding: 5px;
            border-radius: 5px;
        }
        
        .cell {
            background-color: white;
            border: none;
            font-size: 36px;
            font-weight: bold;
            cursor: pointer;
            transition: background-color 0.2s;
        }
        
        .cell:hover {
            background-color: #f5f5f5;
        }
        
        .cell:disabled {
            cursor: not-allowed;
        }
        
        .status {
            font-size: 24px;
            margin: 20px 0;
            font-weight: bold;
            color: #333;
        }
        
        .reset-btn {
            background-color: #4CAF50;
            color: white;
            border: none;
            padding: 12px 24px;
            font-size: 16px;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.2s;
        }
        
        .reset-btn:hover {
            background-color: #45a049;
        }
        
        .winner {
            color: #4CAF50;
        }
        
        .draw {
            color: #ff9800;
        }
    </style>
</head>
<body>
    <div class="game-container">
        <h1>Tic Tac Toe</h1>
        <div class="status" id="status">Player X's turn</div>
        <div class="board" id="board">
            <button class="cell" data-index="0"></button>
            <button class="cell" data-index="1"></button>
            <button class="cell" data-index="2"></button>
            <button class="cell" data-index="3"></button>
            <button class="cell" data-index="4"></button>
            <button class="cell" data-index="5"></button>
            <button class="cell" data-index="6"></button>
            <button class="cell" data-index="7"></button>
            <button class="cell" data-index="8"></button>
        </div>
        <button class="reset-btn" onclick="resetGame()">Reset Game</button>
    </div>

    <script>
        let currentPlayer = 'X';
        let gameBoard = ['', '', '', '', '', '', '', '', ''];
        let gameActive = true;

        const statusElement = document.getElementById('status');
        const cells = document.querySelectorAll('.cell');

        // Winning combinations
        const winningConditions = [
            [0, 1, 2],
            [3, 4, 5],
            [6, 7, 8],
            [0, 3, 6],
            [1, 4, 7],
            [2, 5, 8],
            [0, 4, 8],
            [2, 4, 6]
        ];

        // Add click event to each cell
        cells.forEach(cell => {
            cell.addEventListener('click', handleCellClick);
        });

        function handleCellClick(event) {
            const clickedCell = event.target;
            const clickedCellIndex = parseInt(clickedCell.getAttribute('data-index'));

            // Check if cell is already filled or game is over
            if (gameBoard[clickedCellIndex] !== '' || !gameActive) {
                return;
            }

            // Update game board and display
            gameBoard[clickedCellIndex] = currentPlayer;
            clickedCell.textContent = currentPlayer;
            clickedCell.disabled = true;

            checkResult();
        }

        function checkResult() {
            let roundWon = false;

            // Check for winning combinations
            for (let i = 0; i < winningConditions.length; i++) {
                const [a, b, c] = winningConditions[i];
                if (gameBoard[a] && gameBoard[a] === gameBoard[b] && gameBoard[a] === gameBoard[c]) {
                    roundWon = true;
                    break;
                }
            }

            if (roundWon) {
                statusElement.textContent = `Player ${currentPlayer} wins!`;
                statusElement.className = 'status winner';
                gameActive = false;
                // Disable all cells
                cells.forEach(cell => cell.disabled = true);
                return;
            }

            // Check for draw
            if (!gameBoard.includes('')) {
                statusElement.textContent = 'Game ended in a draw!';
                statusElement.className = 'status draw';
                gameActive = false;
                return;
            }

            // Switch players
            currentPlayer = currentPlayer === 'X' ? 'O' : 'X';
            statusElement.textContent = `Player ${currentPlayer}'s turn`;
            statusElement.className = 'status';
        }

        function resetGame() {
            currentPlayer = 'X';
            gameBoard = ['', '', '', '', '', '', '', '', ''];
            gameActive = true;
            statusElement.textContent = "Player X's turn";
            statusElement.className = 'status';
            
            cells.forEach(cell => {
                cell.textContent = '';
                cell.disabled = false;
            });
        }
    </script>
</body>
</html>
